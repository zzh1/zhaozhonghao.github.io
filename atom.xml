<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhonghao_Zhao</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-31T07:47:49.471Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhonghao_Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker下搭建LNMP环境</title>
    <link href="http://yoursite.com/2018/07/31/docker%E4%B8%8B%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/07/31/docker下搭建LNMP环境/</id>
    <published>2018-07-31T07:33:46.000Z</published>
    <updated>2018-07-31T07:47:49.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx的安装"><a href="#nginx的安装" class="headerlink" title="nginx的安装"></a>nginx的安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 80:80 -v /E_DRIVE/nginx/conf_bak/nginx.conf:/etc/nginx/conf.d/default.conf -v /E_DRIVE/nginx/html:/var/www/html --name zzh-nginx nginx</span><br></pre></td></tr></table></figure><h6 id="命令解析"><a href="#命令解析" class="headerlink" title="命令解析"></a>命令解析</h6><p>docker run 创建并运行一个容器<br>格式： docker run [OPTIONS] image[tag]<br><a id="more"></a></p><h6 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h6><p>-i 以交互模式运行容器，通常与 -t 同时使用；<br>-t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>-d 后台运行容器并返回容器id<br>-p 端口映射，格式为：主机(宿主)端口:容器端口;(PS:宿主机端口不能重复，<a href="https://hub.docker.com/_/nginx/" target="_blank" rel="noopener">docker文档—nginx</a>中的例子去查找容器默认端口);<br>–name 为容器起名字<br>-v 路径映射，格式为：主机(宿主)路径:容器中路径;<br>(PS:1.本地路径自己创建，宿主机路径自己本地创建，容器中在上面官方文档中查找  </p><ol start="2"><li>映射指的是容器中相应文件随着本地文件的改变而改变，从而达到方便的控制容器内文件的作用；也就是说本地文件什么内容，容器内相应文件就是什么内容。那么有一个问题，本地文件中的初始内容如何填？先在未映射的前提下创建相同容器，进去相应文件，将内容复制出来作为本地文件的初始内容  </li><li>文件映射要注意文件夹对应文件夹，文件对应文件。在文档中貌似有文件映射文件夹的，想让自己创建，我尝试过一直报错)。  <h6 id="上面的命令：后台运行，指定端口，映射nginx配置文件，映射nginx执行目录，为容器其名字，镜像名。"><a href="#上面的命令：后台运行，指定端口，映射nginx配置文件，映射nginx执行目录，为容器其名字，镜像名。" class="headerlink" title="上面的命令：后台运行，指定端口，映射nginx配置文件，映射nginx执行目录，为容器其名字，镜像名。"></a>上面的命令：后台运行，指定端口，映射nginx配置文件，映射nginx执行目录，为容器其名字，镜像名。</h6></li></ol><h3 id="php的安装"><a href="#php的安装" class="headerlink" title="php的安装"></a>php的安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 9000:9000 -v /E_DRIVE/nginx/html:/var/www/html -v /E_DRIVE/php/conf_bak/hosts:/etc/hosts --name zzh-php-5.5.29 php:5.5.29-fpm</span><br></pre></td></tr></table></figure><h6 id="命令解释："><a href="#命令解释：" class="headerlink" title="命令解释："></a>命令解释：</h6><p>映射php的执行目录，映射php的hosts文件(方便增加域名解析，不用的话可以不映射)</p><h4 id="注意：因为容器中的php只是核心库，经常会报错，提示某某函数不存在，或者某某未定义，原因都是库不全，解决办法需要增加扩展。进入PHP容器执行"><a href="#注意：因为容器中的php只是核心库，经常会报错，提示某某函数不存在，或者某某未定义，原因都是库不全，解决办法需要增加扩展。进入PHP容器执行" class="headerlink" title="注意：因为容器中的php只是核心库，经常会报错，提示某某函数不存在，或者某某未定义，原因都是库不全，解决办法需要增加扩展。进入PHP容器执行"></a>注意：因为容器中的php只是核心库，经常会报错，提示某某函数不存在，或者某某未定义，原因都是库不全，解决办法需要增加扩展。进入PHP容器执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-php-ext-install pdo_mysql</span><br><span class="line">docker-php-ext-install mbstring</span><br></pre></td></tr></table></figure><p>我这里需要扩展 pdo_mysql 和 mbstring两个库 </p><h4 id="nginx和php配置的修改"><a href="#nginx和php配置的修改" class="headerlink" title="nginx和php配置的修改"></a>nginx和php配置的修改</h4><ol><li>nginx自身配置，修改nginx默认执行目录及执行文件(一下是修改部分，未全部拉取ngin配置文件)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  location / &#123;</span><br><span class="line">      root   /var/www/html;</span><br><span class="line">      index  index.html index.htm  index.php;</span><br><span class="line">autoindex  on;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.nginx中指向php容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           /var/www/html;</span><br><span class="line">    fastcgi_pass   192.168.99.100:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    #fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line"> fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些配置默认注释掉的，打开后简单修改即可，路径是php执行路径，ip是自己docker的ip，每次进去时弹出的ip。</p><h3 id="Mysql的安装"><a href="#Mysql的安装" class="headerlink" title="Mysql的安装"></a>Mysql的安装</h3><p>在lnmp环境中，mysql相对独立，使用时，只需要配置mysql服务器即可连接使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql2 -p 3307:3306  -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</span><br></pre></td></tr></table></figure><h6 id="命令解析-1"><a href="#命令解析-1" class="headerlink" title="命令解析"></a>命令解析</h6><p>-e 设置环境变量；</p><p>mysql一般不需要映射配置文件，需要的话自己映射。进入mysql容器后，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@e623656e4c9d:/# mysql -u root -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>进入到mysql，可以执行sql语句。  </p><h5 id="注意：使用其他视图工具进行连接docker中mysql服务器的时候报错，我使用的是SQLog进行连接，报错。查了下资料，在mysql容器里面的sql执行窗口执行："><a href="#注意：使用其他视图工具进行连接docker中mysql服务器的时候报错，我使用的是SQLog进行连接，报错。查了下资料，在mysql容器里面的sql执行窗口执行：" class="headerlink" title="注意：使用其他视图工具进行连接docker中mysql服务器的时候报错，我使用的是SQLog进行连接，报错。查了下资料，在mysql容器里面的sql执行窗口执行："></a>注意：使用其他视图工具进行连接docker中mysql服务器的时候报错，我使用的是SQLog进行连接，报错。查了下资料，在mysql容器里面的sql执行窗口执行：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;你的密码&apos;;</span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;你的密码&apos;;</span><br><span class="line">SELECT plugin FROM mysql.user WHERE User = &apos;root&apos;;</span><br></pre></td></tr></table></figure><p>我这里只执行了第一句就连接成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;nginx的安装&quot;&gt;&lt;a href=&quot;#nginx的安装&quot; class=&quot;headerlink&quot; title=&quot;nginx的安装&quot;&gt;&lt;/a&gt;nginx的安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -it -d -p 80:80 -v /E_DRIVE/nginx/conf_bak/nginx.conf:/etc/nginx/conf.d/default.conf -v /E_DRIVE/nginx/html:/var/www/html --name zzh-nginx nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;命令解析&quot;&gt;&lt;a href=&quot;#命令解析&quot; class=&quot;headerlink&quot; title=&quot;命令解析&quot;&gt;&lt;/a&gt;命令解析&lt;/h6&gt;&lt;p&gt;docker run 创建并运行一个容器&lt;br&gt;格式： docker run [OPTIONS] image[tag]&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>测试文章更哈哈</title>
    <link href="http://yoursite.com/2018/07/19/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0%E6%9B%B4%E5%93%88%E5%93%88/"/>
    <id>http://yoursite.com/2018/07/19/测试文章更哈哈/</id>
    <published>2018-07-19T10:12:08.000Z</published>
    <updated>2018-07-19T10:12:27.092Z</updated>
    
    <content type="html"><![CDATA[<p>第二篇文章测试测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第二篇文章测试测试&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://yoursite.com/2018/07/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2018/07/19/我的第一篇文章/</id>
    <published>2018-07-19T09:51:33.000Z</published>
    <updated>2018-07-19T09:53:27.581Z</updated>
    
    <content type="html"><![CDATA[<p>很就很久以前</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很就很久以前&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
